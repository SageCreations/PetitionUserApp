@page "/"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

@inject IStringLocalizer<SharedResource> Loc




<PageTitle>Petition For Prayer</PageTitle>

<h1 id="TitleName">@_title</h1>

<EditForm Model="@_entryModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <!-- Input Field for Name -->
    <div class="form-floating mb-3">
        <InputText 
            type="text" 
            class="form-control" 
            id="Name" 
            placeholder="name" 
            @bind-Value="@_entryModel.Name"/>
        <ValidationMessage For="@( () => _entryModel.Name)"/>
        <label for="Name">@_name</label>
    </div>
    
    <!-- Input Field for Description -->
    <div class="form-floating">
        <InputTextArea 
            id="Description" 
            class="form-control" 
            placeholder="Type here" 
            style="height: 200px" 
            @bind-Value="@_entryModel.Description"/>
            <ValidationMessage For="@( () => _entryModel.Description)"/>
        <label for="Description">@_description</label>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">@_submit</button>
    </div>
    
    <!-- Modal -->
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@_modalTitle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>@_modalMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="Close">Close</button>
                </div>
            </div>
        </div>
    </div>
    
    
    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

    
</EditForm>



@code {
    private EntryModel _entryModel = new EntryModel();

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("Petition", _entryModel);

            // Throw an exception if the response has a failure status code.
            response.EnsureSuccessStatusCode();
            
            Open("Submitted Successfully!", "Click anywhere else or the button to return back to the page.");

        }
        catch (HttpRequestException e)
        {
            // Handle exceptions that are thrown for unsuccessful response codes
            // You can use e.StatusCode to check the specific status code returned
            Console.WriteLine($"Request failed: {e.Message}");
            
            Open("Submission Failed!","There was an error in connecting with the database.");
        }
        catch (Exception e)
        {
            // Handle any other exceptions that occur when making the request
            Console.WriteLine($"An error occurred: {e.Message}");
            
            Open("Submission Failed!", "Something went wrong with Website itself :(");
        }
    }
    
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop;


    private void Open(string title, string message)
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;

        _modalTitle = title;
        _modalMessage = message;
        
        StateHasChanged();
    }

    private void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
    // If we got this far, the request was successful. Clear the form.
        
        
        _entryModel = new EntryModel();
        
        StateHasChanged();
    }

    public class EntryModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = null!;

        [Required(ErrorMessage = "Description is required")]
        public string Description { get; set; } = null!;
    }

    private string _modalTitle = "";
    private string _modalMessage = "";
    
    
    
    // Localization stuff
    private string? _name;
    private string? _description;
    private string? _submit;
    private string? _title;

    protected override void OnInitialized()
    {
        _name = Loc["name"];
        _description = Loc["description"];
        _submit = Loc["submit"];
        _title = Loc["title"];
    }
    
}